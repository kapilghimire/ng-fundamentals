Branches
  master
  directives

Bootstraping of angular app
 starts at main.ts file
 main property of angular.json points to main.ts
 main proerty of angular.json is used by webpack
 main.ts bootstarp AppModule
 AppModule bootstarp appcomponent

 Declearing component with inline template
  import { Component } from '@angular/core';

  @Component({
    selector: 'events-app',
    template: '<h2>Hello World</h2>',
  })
  export class EventsAppComponent {
    title = 'ng-fundamentals';
  }

where does angular serve static files from
  files under  src/assest  can be served as static files
  even if file is in deep folder herarchy inside src/assest it will be serverd
  eg src/assest/images/abc.png will also be served

where to keep static images
  src/assests or any deep level of src/assest

angular.json proerty which bundles static assests (relative to index.html) and css
"assets": [
              "src/favicon.ico",
              "src/assets"
            ],
"styles": [
              "src/styles.css"
            ],

angular.json to add external js or css library
  "styles": [
              "node_modules/ngf-bootstrap/dist/bootstrap.min.css",
              "src/styles.css"
            ],
 "scripts": [
              "node_modules/jquery/dist/jquery.min.js",
              "node_modules/bootstrap/dist/js/bootstrap.js"
            ]



restart angular compiler when
change in webpack or angular.json

@NgModule json arguments and prperty
@NgModule({
  declarations: [
    EventsAppComponent,
    EventListComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [EventsAppComponent]
})



Registering new component to a module at NgModule

@NgModule({
  declarations: [
    EventsAppComponent,
    EventListComponent   // registering component
  ],

string interpolation in angular
one way binding
 <h2>{{event.name}}</h2>


 Using external html file for component html
 @Component({
   selector:'events-list',
   templateUrl:'./events-list.component.html'
})

Input to child compenent in angular
import { Component, Input } from "@angular/core";
export class EventThumbnailComponent{

  @Input() event:any

}

import for input decorator
import { Component, Input } from "@angular/core";

Steps to use component
1) Create component in typscript file
2) define compenent selector and templateUrl/template
3) register compenent in NgModule inside declarations property
4) using compenent with its selector as <selector [property]="value"></selector>

Sending input property to child compenent from parent

@Component({
  selector: 'events-list',
  template: `
  <div>
   <h1>Upcomming Angular Events</h1>
   <hr>
   <event-thumbnail [event]="event1"></event-thumbnail>
 </div>`
})


emitting event for child compenent to parent

@Component({
  selector:'event-thumbnail',
  template:`
  <div>
     ............. additional html ...........
    <button class="btn btn-primary" (click)="handleClickMe()">Click me!</button>
  </div>
  `
})
export class EventThumbnailComponent{

  @Input() event:any
  @Output() eventClick = new EventEmitter()

  handleClickMe(){
    console.log('Clicked! ')
    this.eventClick.emit('foo') ...// emitting foo
  }

}

define event emitter in child compenent
 @Output() eventClick = new EventEmitter()


 use event emitter to emit event

 export class EventThumbnailComponent{

  @Input() event:any
  @Output() eventClick = new EventEmitter()

  handleClickMe(){
    console.log('Clicked! ')
    this.eventClick.emit('foo') ...// emitting foo
  }

}


template reference variable benifit to parent from child
1) template reference varialble define at parent level
2) Gives access to public method and property of child compenent to parent
3) you can bind public property of child using template reference on parent template


template reference property and method of  child on parent example

<div>
   <h1>Upcomming Angular Events</h1>
   <hr>
   <event-thumbnail #thumbnail (eventClick)="handleEventClicked($event)"  [event]="event1"></event-thumbnail>
   <h2>{{thumbnail.someProperty}}</h2>
   <button class="btn btn-primary" (click)="thumbnail.logFoo()"> me some foo</button>
 </div>`

 #thumbnail is template variable
 someProperty exist in EventThumbnailComponent
 logFoo() also exist in EventThumbnailComponent


 Three ways to handle inter-compenent communication
 1) input properties
 2) Output properties
 3) template reference variable


 applying inline styles to component
 @Component({
  selector:'event-thumbnail',
  template:`
  ... html for compenent....
  `,
  styles: [` // inline styles
    .pad-left{ margin-left: 10px}
    .well div{ color : red}
  `]

})
export class EventThumbnailComponent{

}


Style benifit of adding at compenent level in angular

Angular provide Style Encapsulation at compenent level


interpolation
{{user.name}}

proerty binding
<img [src]="user.imageUrl" />

event binding
<button (click)="doSomething()">   </button>


Structural directives
They change shape of dom  add or remove not hide dom elements
eg: *ngFor *ngIf

*ngFor Structural directive
<event-thumbnail  *ngFor = "let event of events"[event]="event"></event-thumbnail>


safe navigation operator
{{event?.name}} // do not evaluate name if event in null
{{event?.location?.address}} // do not evaluate location if event is null and don't evaluate address if location is null



Not rendering element if not required
 <div  *ngIf="event?.onlineUrl">   // gives performace benifit
      Online URL: {{event?.onlineUrl}}
    </div>

Hiding element optionally
 <div  [hidden] = "!event?.onlineUrl" >   // don't give performace benifit
      Online URL: {{event?.onlineUrl}}
    </div>

ngSwitch
 <div [ngSwitch]="event?.time">Time: {{event.time}}
      <span *ngSwitchCase="'8:00 am'">(Early Start)</span>
      <span *ngSwitchCase="'10:00 am'">(Late Start)</span>
      <span *ngSwitchDefault>(Normal Start)</span>
    </div>



single css class binding for dynamic css / apply green class
 <div [class.green]="event?.time === '8:00 am'" [ngSwitch]="event?.time">Time: {{event.time}}

Multiple css class binding for dynamic css /apply green and bold class
  <div [ngClass]="{green: event?.time === '8:00 am', bold:event?.time === '8:00 am' }" [ngSwitch]="event?.time">Time: {{event.time}}

