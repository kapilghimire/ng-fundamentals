Branches
  master
  directives
  services
  Routing
  routing-can-activate
  routing-can-deactivate
  routing-route-resolver
  route-styling
  feature-module
  imports-barrel
  login-form-implementation
  reactive-form
  reactive-form-validator
  reactive-form-multiple-validator

Bootstraping of angular app
 starts at main.ts file
 main property of angular.json points to main.ts
 main proerty of angular.json is used by webpack
 main.ts bootstarp AppModule
 AppModule bootstarp appcomponent

 Declearing component with inline template
  import { Component } from '@angular/core';

  @Component({
    selector: 'events-app',
    template: '<h2>Hello World</h2>',
  })
  export class EventsAppComponent {
    title = 'ng-fundamentals';
  }

where does angular serve static files from
  files under  src/assest  can be served as static files
  even if file is in deep folder herarchy inside src/assest it will be serverd
  eg src/assest/images/abc.png will also be served

where to keep static images
  src/assests or any deep level of src/assest

angular.json proerty which bundles static assests (relative to index.html) and css
"assets": [
              "src/favicon.ico",
              "src/assets"
            ],
"styles": [
              "src/styles.css"
            ],

angular.json to add external js or css library
  "styles": [
              "node_modules/ngf-bootstrap/dist/bootstrap.min.css",
              "src/styles.css"
            ],
 "scripts": [
              "node_modules/jquery/dist/jquery.min.js",
              "node_modules/bootstrap/dist/js/bootstrap.js"
            ]



restart angular compiler when
change in webpack or angular.json

@NgModule json arguments and prperty
@NgModule({
  declarations: [
    EventsAppComponent,
    EventListComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [EventsAppComponent]
})



Registering new component to a module at NgModule

@NgModule({
  declarations: [
    EventsAppComponent,
    EventListComponent   // registering component
  ],

string interpolation in angular
one way binding
 <h2>{{event.name}}</h2>


 Using external html file for component html
 @Component({
   selector:'events-list',
   templateUrl:'./events-list.component.html'
})

Input to child compenent in angular
import { Component, Input } from "@angular/core";
export class EventThumbnailComponent{

  @Input() event:any

}

import for input decorator
import { Component, Input } from "@angular/core";

Steps to use component
1) Create component in typscript file
2) define compenent selector and templateUrl/template
3) register compenent in NgModule inside declarations property
4) using compenent with its selector as <selector [property]="value"></selector>

Sending input property to child compenent from parent

@Component({
  selector: 'events-list',
  template: `
  <div>
   <h1>Upcomming Angular Events</h1>
   <hr>
   <event-thumbnail [event]="event1"></event-thumbnail>
 </div>`
})


emitting event for child compenent to parent

@Component({
  selector:'event-thumbnail',
  template:`
  <div>
     ............. additional html ...........
    <button class="btn btn-primary" (click)="handleClickMe()">Click me!</button>
  </div>
  `
})
export class EventThumbnailComponent{

  @Input() event:any
  @Output() eventClick = new EventEmitter()

  handleClickMe(){
    console.log('Clicked! ')
    this.eventClick.emit('foo') ...// emitting foo
  }

}

define event emitter in child compenent
 @Output() eventClick = new EventEmitter()


 use event emitter to emit event

 export class EventThumbnailComponent{

  @Input() event:any
  @Output() eventClick = new EventEmitter()

  handleClickMe(){
    console.log('Clicked! ')
    this.eventClick.emit('foo') ...// emitting foo
  }

}


template reference variable benifit to parent from child
1) template reference varialble define at parent level
2) Gives access to public method and property of child compenent to parent
3) you can bind public property of child using template reference on parent template


template reference property and method of  child on parent example

<div>
   <h1>Upcomming Angular Events</h1>
   <hr>
   <event-thumbnail #thumbnail (eventClick)="handleEventClicked($event)"  [event]="event1"></event-thumbnail>
   <h2>{{thumbnail.someProperty}}</h2>
   <button class="btn btn-primary" (click)="thumbnail.logFoo()"> me some foo</button>
 </div>`

 #thumbnail is template variable
 someProperty exist in EventThumbnailComponent
 logFoo() also exist in EventThumbnailComponent


 Three ways to handle inter-compenent communication
 1) input properties
 2) Output properties
 3) template reference variable


 applying inline styles to component
 @Component({
  selector:'event-thumbnail',
  template:`
  ... html for compenent....
  `,
  styles: [` // inline styles
    .pad-left{ margin-left: 10px}
    .well div{ color : red}
  `]

})
export class EventThumbnailComponent{

}


Style benifit of adding at compenent level in angular

Angular provide Style Encapsulation at compenent level


interpolation
{{user.name}}

proerty binding
<img [src]="user.imageUrl" />

event binding
<button (click)="doSomething()">   </button>


Structural directives
They change shape of dom  add or remove not hide dom elements
eg: *ngFor *ngIf

*ngFor Structural directive
<event-thumbnail  *ngFor = "let event of events"[event]="event"></event-thumbnail>


safe navigation operator
{{event?.name}} // do not evaluate name if event in null
{{event?.location?.address}} // do not evaluate location if event is null and don't evaluate address if location is null



Not rendering element if not required
 <div  *ngIf="event?.onlineUrl">   // gives performace benifit
      Online URL: {{event?.onlineUrl}}
    </div>

Hiding element optionally
 <div  [hidden] = "!event?.onlineUrl" >   // don't give performace benifit
      Online URL: {{event?.onlineUrl}}
    </div>

ngSwitch
 <div [ngSwitch]="event?.time">Time: {{event.time}}
      <span *ngSwitchCase="'8:00 am'">(Early Start)</span>
      <span *ngSwitchCase="'10:00 am'">(Late Start)</span>
      <span *ngSwitchDefault>(Normal Start)</span>
    </div>



single css class binding for dynamic css / apply green class
 <div [class.green]="event?.time === '8:00 am'" [ngSwitch]="event?.time">Time: {{event.time}}

Multiple css class binding for dynamic css /apply green and bold class
  <div [ngClass]="{green: event?.time === '8:00 am', bold:event?.time === '8:00 am' }" [ngSwitch]="event?.time">Time: {{event.time}}

returning multiple css class as object for [ngClass]

<div [ngClass]="getStartTimeClass()" [ngSwitch]="event?.time">Time: {{event.time}}
getStartTimeClass(){
    const isEarlyStart = this.event && this.event.time === '8:00 am';

    return {green:isEarlyStart, bold:isEarlyStart}
  }

  returning multiple css class as string for [ngClass]

<div [ngClass]="getStartTimeClass()" [ngSwitch]="event?.time">Time: {{event.time}}
  getStartTimeClass(){
      if(this.event && this.event.time === '8:00 am')
        return 'green bold'
      return ''
    }


  returning multiple css class as array for [ngClass]

<div [ngClass]="getStartTimeClass()" [ngSwitch]="event?.time">Time: {{event.time}}
    getStartTimeClass(){
    if(this.event && this.event.time === '8:00 am')
    return ['green', 'bold']
    return []
  }

  applying single inline style in angular with ternary operator
  <div [style.color]="event?.time === '8:00 am' ? '#003300' : '#bbb' "  [ngSwitch]="event?.time">Time: {{event.time}}

  multiple inline css
  <div [ngStyle]="{'color': event?.time === '8:00 am' ? '#003300' : '#bbb' , 'font-weight': event?.time === '8:00 am' ? 'bold' : 'normal'  } "  [ngSwitch]="event?.time">Time: {{event.time}}

  multiple inline css from component to template
 <div [ngStyle]="getStartTimeStyle()"  [ngSwitch]="event?.time">Time: {{event.time}}
   getStartTimeStyle():any{
    if(this.event && this.event.time === '8:00 am')
    return {color:'#003300', 'font-weight': 'bold'}
    return {}
  }

Create a Injectable service
import { Injectable } from "@angular/core";

@Injectable()
export class EventService{
  getEvents(){
    return EVENTS;
  }
}

@Injectable() decorator is required

if a service has its own depedences in constructor
eg: if a need http service for angular framwork which can be injected to service via constructor injection


Registing Service in NgModule
@NgModule({
  declarations: [
   --- component registeration ---
  ],
  imports: [
   ---- angular imports ---
  ],
  providers: [EventService],  // --registering service
  bootstrap: [EventsAppComponent]
})
export class AppModule { }


injecting EventService to EventListComponent
export class EventListComponent {

  constructor(private eventService : EventService){

  }
}


lifecycle hook of component to call ajax call
ngOnInit() method

make compenent implemente ngOnInit method()

export class EventListComponent implements OnInit{
  // OnInit interface require ngOnInit() method

}


configuring external library css and javascript in angular--toster

in angular.json
"styles": [
              "node_modules/toastr/build/toastr.min.css", -- css
              "node_modules/ngf-bootstrap/dist/bootstrap.min.css",
              "src/styles.css"
            ],
            "scripts": [
              "node_modules/jquery/dist/jquery.min.js",
              "node_modules/toastr/build/toastr.min.js", -- javascript
              "node_modules/bootstrap/dist/js/bootstrap.js"
            ]

encapsulating toastr service
import { Injectable } from "@angular/core";

declare let toastr:any --- /// global scope available by the libaray
@Injectable()
export class ToastrService{
 success(message:string,title?:string){
   toastr.success(message,title)
 }
 info(message:string,title?:string){
  toastr.info(message,title)
}
warning(message:string,title?:string){
  toastr.warning(message,title)
}
error(message:string,title?:string){
  toastr.error(message,title)
}

}


Defining appRoutes in routes.ts at root of application
export const appRoutes:Routes = [
  { path: 'events', component: EventListComponent },
  { path: 'events/:id', component: EventDetailsComponent },
  { path: '', redirectTo:'/events', pathMatch:'full'}
]

How does from which path of server to load routes
 <base href="/">


 Resgistring router module in app Module

 @NgModule({
  declarations: [
   -- components --
  ],
  imports: [
    BrowserModule,
    RouterModule.forRoot(appRoutes) // registring routes
  ],
  providers: [EventService,ToastrService],
  bootstrap: [EventsAppComponent]
})
export class AppModule { }


Parameterized routes
  { path: 'events/:id', component: EventDetailsComponent },


root route

 { path: '', redirectTo:'/events', pathMatch:'full'}


 Service to get route parameter for route
 ActivatedRoute

 Getting parameter from route

 export class EventDetailsComponent implements OnInit{
  event:any;
  constructor(private eventService: EventService,private route :ActivatedRoute){

  }
  ngOnInit(): void {
    this.event= this.eventService.getEvent(+this.route.snapshot.params['id'])
  }


}

using router link
@Component({
  selector:'event-thumbnail',
  template:`
  <div [routerLink]="['/events',event.id]" class="well hoverwell thumbnail">
    <h2>{{event.name}}</h2>
    <div>Date: {{event.date}}</div>


adding router link for anchor element
 <a [routerLink]="['/events']" >All Events</a>

Navigation to route  using code needs injection of service
Router

Navigation using code
export class CreateEventComponent{

  constructor (private router: Router){

  }
  cancel(){
    this.router.navigate(['/events'])
  }
}

Defining Route with typscript type for angular route

export const appRoutes:Routes = [
  { path:'events/new', component: CreateEventComponent},
  { path: 'events', component: EventListComponent },
  { path: 'events/:id', component: EventDetailsComponent,
   canActivate:[EventRouteActivator] },
  {path: '404', component:Error404Component},
]

Registering can Activate Route
export const appRoutes:Routes = [
  { path: 'events/:id', component: EventDetailsComponent,
   canActivate:[EventRouteActivator] },
]

Defining EventRouter Service for canActive route implementation
export class EventRouteActivator implements CanActivate{

  constructor (private eventService: EventService, private router:Router){}
  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {
     const  eventExist = !! this.eventService.getEvent(+route.params['id']);

     if(!eventExist)
     this.router.navigate(['/404'])

     return eventExist

  }


  passing function as parameter for canActivate and canDeactivate as function parameter


   export const appRoutes:Routes = [
  { path:'events/new', component: CreateEventComponent,
   canDeactivate:['canDeactivateCreateEvent']},


   injecting function as provider for canactivate and canDeactivate routes definition
   providers: [EventService,ToastrService,EventRouteActivator,
  {
    provide:'canDeactivateCreateEvent',
    useValue: checkDirtyState
  }


  checkDirty state canDeactivate route implementation
  export function checkDirtyState(component:CreateEventComponent){
  if(component.isDirty)
  return window.confirm('You have not saved this event, do you really want to cancel ?');

  return true;
}


*********************Route Resolver **************************
Registering a route Resolver in application routes
export const appRoutes:Routes = [
  { path: 'events', component: EventListComponent, resolve: {events: EventListResolver} },
]

Define EventListRoute Resolver to get data
@Injectable()
export class EventListResolver implements Resolve<any>{
  constructor(private eventService:EventService){}
  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
    // we want to return observable show that angular can watch observable
      return this.eventService.getEvents().pipe(map(events =>events))
  }
}

How do get data object out of Route which is intialized by route Resolver
using ActivatedRoute serivice

Getting route resover data in componente
export class EventListComponent implements OnInit {
  events: any;

  constructor(private eventService : EventService,private toastrServie:ToastrService,private route:ActivatedRoute){

  }
  ngOnInit(){
     // getting data out of route resolver
     this.events = this.route.snapshot.data['events'];
  }

Registering Route Resolver in NgModule
providers: [
  EventListResolver,
  ],


********************Style navigation menu ***************
Directive and attribute to on routes
[routerLink]
routerLinkActive
[routerLinkActiveOptions]


styling routes
<li>
          <a [routerLink]="['/events']"
           routerLinkActive="active"
           [routerLinkActiveOptions]="{exact:true}"
          >All Events</a>
        </li>
        <li><a [routerLink]="['/events/new']" routerLinkActive="active">Create Event</a></li>

***********************feature module **************************
two different import for feature module
@NgModule({
  imports:[
    CommonModule,  // AppModule would have BrowserModule
    RouterModule.forChild(userRoutes)  // AppModule would have RouterModule.forRoot(routes)
  ],


  Defining app routes for feature module in appRoutes.ts
  export const appRoutes:Routes = [
  {
    path:'user',
    loadChildren: () => import('./user/user.module')
       .then(m=>m.UserModule)
  }
]

 Defining routes in feature module
 same as defining at app level

Registration  routes steps for feature module
Defining seperate routes
Registration in feature module : RouterModule.forChild(userRoutes)
Registering in Routes at application Routes :
 export const appRoutes:Routes = [
  {
    path:'user',
    loadChildren: () => import('./user/user.module')
       .then(m=>m.UserModule)
  }


******** imports-barrel ******
what is import barrel
you create index.ts file in folder to export typscript object any file inside the folder,
 where index.ts is created
This is done recursively


***** syn to async**********
Rxjs changing sync to async
let subject = new Subject()
    setTimeout(()=>{subject.next(EVENTS); subject.complete();},200)
    return subject;



  ******* validation ********
  css aplication to html for invalid input
  <div class="form-group" [ngClass]="{'error': profileForm.controls['firstName'].invalid &&
                                                     profileForm.controls['firstName'].touched }">
        <label for="firstName">First Name:</label>
        <input formControlName="firstName" id="firstName" type="text" class="form-control" placeholder="First Name..." />
      </div>
